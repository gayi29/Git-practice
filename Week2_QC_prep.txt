What is OS?

An operating system is a system's software that acts as an interface between the user and the computer hardware to control the execution of all kinds of programs.

Goals:
	- User Friendly
	- Efficiency
	- Fast and secure
Functions:

	1. Process Management
		- Which process will be executed first?
		- Process will be executed for how much time.
		- allocating process to processor.
		- deallocating process from processor. 
	2. Memory Management
		- How much memory is allocated to a process.
		- deallocating memory from process.
		- how much memory is used
		- how much memory is free.
	3.I/O Device Management
	4. File Management
	5. Network Management
	6. Security Management

Scripting?
	
	shell scripting is a powerful tool for automating tasks, managing systems, and customizing your environment to suit your needs. 

Instead of manually executing a sequence of commands each time, you can write a script to perform those tasks automatically. This saves time and reduces the risk of errors.


Packet Management software?

	is a tool used in various operating systems to automate the process of installing, updating, configuring, and removing software packages. 

APT (Advanced Package Tool): Used in Debian-based distributions like Ubuntu, it includes apt-get and apt commands.


Kubernetes?

	Containers are a good way to bundle and run your applications. In a production environment, you need to manage the containers that run the applications and ensure that there is no downtime. For example, if a container goes down, another container needs to start. Wouldn't it be easier if this behavior was handled by a system?

That's how Kubernetes comes to the rescue! Kubernetes provides you with a framework to run distributed systems resiliently. 

Deployments?

	A Deployment provides declarative updates for Pods and ReplicaSets.
	The following are typical use cases for Deployments:

Create a Deployment to rollout a ReplicaSet. The ReplicaSet creates Pods in the background. Check the status of the rollout to see if it succeeds or not.
Declare the new state of the Pods by updating the PodTemplateSpec of the Deployment. A new ReplicaSet is created and the Deployment manages moving the Pods from the old ReplicaSet to the new one at a controlled rate. Each new ReplicaSet updates the revision of the Deployment.
Rollback to an earlier Deployment revision if the current state of the Deployment is not stable. Each rollback updates the revision of the Deployment.
Scale up the Deployment to facilitate more load.
Pause the rollout of a Deployment to apply multiple fixes to its PodTemplateSpec and then resume it to start a new rollout.
Use the status of the Deployment as an indicator that a rollout has stuck.
Clean up older ReplicaSets that you don't need anymore


Jenkins?

	Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software.

Jenkins can be installed through native system packages, Docker, or even run standalone by any machine with a Java Runtime Environment (JRE) installed.


Certainly! Let’s create a CI/CD pipeline in Jenkins. A CI/CD pipeline automates the processes of building, testing, and deploying applications. Jenkins is a popular tool for setting up such pipelines. Here are the steps to create a basic CI/CD pipeline using Jenkins:

Install Jenkins?

	If you haven’t already, install Jenkins on your system. You can refer to the Jenkins installation guide for detailed instructions.

Log in to Jenkins:

	Access your Jenkins instance through a web browser and log in using your credentials.

Create a New Pipeline Project:

	Click on the “New Item” option on the Jenkins dashboard.
	Give your pipeline a suitable name.
	Select the “Pipeline” option.

Configure Your Pipeline:
	In the pipeline configuration, you’ll define the stages of your pipeline. These stages represent the steps your application will go through.

Common stages include:
	Test: Running tests on your code.
	Build: Building your application.
	Push: Pushing the built artifacts to a repository.
	Deploy: Deploying the application to different environments (e.g., Dev, Test, Production).

Write a Jenkinsfile:
	A Jenkinsfile is a script that defines your pipeline stages.
You can write your Jenkinsfile directly in the Jenkins UI or store it in your version control system (e.g., Git).

The Jenkinsfile should include the following:

Stages: Define the stages of your pipeline.

Steps: Specify the actions to be performed within each stage.

Environment Variables: Set any necessary environment variables.

Credentials: Manage any required credentials (e.g., API keys, passwords).

Trigger the Pipeline:
Save your pipeline configuration.
Trigger the pipeline manually or set up automatic triggers (e.g., whenever new code is committed to a repository).

View Pipeline Execution:
Jenkins will execute your pipeline according to the defined stages.
Monitor the progress in the Jenkins console.
 